{"version":3,"sources":["canvas/canvas-context.js","canvas/canvas.js","text-recognizer/tesseract-context.js","text-recognizer/text-recognizer.js","App.js","reportWebVitals.js","index.js"],"names":["CanvasContext","React","createContext","undefined","CanvasContextProvider","children","canvasRef","useRef","canvasContextRef","useState","isMouseDown","setIsMouseDown","imageData","setImageData","resize","useCallback","canvas","current","width","window","innerWidth","height","innerHeight","getContext","lineCap","strokeStyle","lineWidth","initializeCanvas","addEventListener","uninitializeCanvas","removeEventListener","mouseDown","x","y","nativeEvent","touches","pageX","pageY","beginPath","moveTo","mouseUp","closePath","getImageData","mouseMove","lineTo","stroke","clear","fillStyle","fillRect","Provider","value","useCanvasContext","useContext","Canvas","useLayoutEffect","ref","id","className","onMouseDown","onTouchStart","onMouseUp","onTouchEnd","onTouchCancel","onMouseMove","onTouchMove","TesseractContext","TesseractProvider","language","worker","setWorker","a","newWorker","createWorker","logger","m","console","log","load","loadLanguage","initialize","TextRecognize","imageBlob","text","setText","useEffect","recognize","result","data","work","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f95f540d.chunk.js","sourcesContent":["import React, { useContext, useRef, useCallback, useState } from 'react';\r\n\r\nconst CanvasContext = React.createContext(undefined);\r\n\r\nexport default function CanvasContextProvider({\r\n  children\r\n}) {\r\n\r\n  const canvasRef = useRef(undefined);\r\n  const canvasContextRef = useRef(undefined);\r\n  const [isMouseDown, setIsMouseDown] = useState(false);\r\n  const [imageData, setImageData] = useState(undefined);\r\n\r\n  const resize = useCallback(() => {\r\n    const canvas = canvasRef.current;\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n    canvasContextRef.current = canvas.getContext('2d');\r\n    canvasContextRef.current.lineCap = \"round\";\r\n    canvasContextRef.current.strokeStyle = \"black\";\r\n    canvasContextRef.current.lineWidth = 3;\r\n  }, []);\r\n\r\n  const initializeCanvas = useCallback(() => {\r\n    window.addEventListener('resize', resize);\r\n    resize();\r\n  }, [resize]);\r\n\r\n  const uninitializeCanvas = useCallback(() => {\r\n    window.removeEventListener('resize', resize);\r\n  }, [resize]);\r\n\r\n  const mouseDown = useCallback(({ nativeEvent }) => {\r\n    let x, y;\r\n    if (nativeEvent.touches && nativeEvent.touches[0]) {\r\n      x = nativeEvent.touches[0].pageX\r\n      y = nativeEvent.touches[0].pageY\r\n    } else {\r\n      x = nativeEvent.pageX\r\n      y = nativeEvent.pageY\r\n    }\r\n    canvasContextRef.current.beginPath();\r\n    canvasContextRef.current.moveTo(x, y);\r\n    setIsMouseDown(true);\r\n  }, []);\r\n\r\n  const mouseUp = useCallback(() => {\r\n    const canvas = canvasRef.current;\r\n    canvasContextRef.current.closePath();\r\n    setIsMouseDown(false);\r\n    setImageData(canvasContextRef.current.getImageData(0, 0, canvas.width, canvas.height));\r\n  }, []);\r\n\r\n  const mouseMove = useCallback(({ nativeEvent }) => {\r\n    if (!isMouseDown) {\r\n      return;\r\n    }\r\n    \r\n    let x, y;\r\n    if (nativeEvent.touches && nativeEvent.touches[0]) {\r\n      x = nativeEvent.touches[0].pageX\r\n      y = nativeEvent.touches[0].pageY\r\n    } else {\r\n      x = nativeEvent.pageX\r\n      y = nativeEvent.pageY\r\n    }\r\n    canvasContextRef.current.lineTo(x, y);\r\n    canvasContextRef.current.stroke();\r\n  }, [isMouseDown]);\r\n\r\n  const clear = useCallback(() => {\r\n    const canvas = canvasRef.current;\r\n    canvasContextRef.current.fillStyle = \"white\"\r\n    canvasContextRef.current.fillRect(0, 0, canvas.width, canvas.height)\r\n  }, []);\r\n\r\n  return (\r\n    <CanvasContext.Provider value={{\r\n      canvasRef,\r\n      canvasContextRef,\r\n      initializeCanvas,\r\n      uninitializeCanvas,\r\n      mouseDown,\r\n      mouseUp,\r\n      mouseMove,\r\n      clear,\r\n      imageData\r\n    }}>\r\n      {children}\r\n    </CanvasContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useCanvasContext() {\r\n  return useContext(CanvasContext);\r\n}\r\n","import { useLayoutEffect } from \"react\";\r\nimport { useCanvasContext } from \"./canvas-context\";\r\n\r\nexport default function Canvas() {\r\n  const {\r\n    canvasRef,\r\n    initializeCanvas,\r\n    uninitializeCanvas,\r\n    mouseDown,\r\n    mouseUp,\r\n    mouseMove\r\n  } = useCanvasContext();\r\n\r\n  useLayoutEffect(() => {\r\n    initializeCanvas();\r\n    return () => uninitializeCanvas();\r\n  }, [initializeCanvas, uninitializeCanvas]);\r\n\r\n  return (\r\n    <canvas \r\n      ref={canvasRef} \r\n      id=\"canvas\" \r\n      className=\"canvas\"\r\n      \r\n      onMouseDown={mouseDown}\r\n      onTouchStart={mouseDown}\r\n\r\n      onMouseUp={mouseUp}\r\n      onTouchEnd={mouseUp}\r\n      onTouchCancel={mouseUp}\r\n\r\n      onMouseMove={mouseMove}\r\n      onTouchMove={mouseMove}\r\n    />\r\n  )\r\n}\r\n","import * as React from 'react';\r\nimport { createWorker } from 'tesseract.js';\r\n\r\nconst TesseractContext = React.createContext(undefined);\r\n\r\nexport default function TesseractProvider({\r\n  language = 'eng', children\r\n}) {\r\n  const [worker, setWorker] = React.useState(undefined);\r\n\r\n  React.useEffect(() => {\r\n    async function load() {\r\n      setWorker(undefined);\r\n      const newWorker = createWorker({\r\n        logger: m => console.log(m)\r\n      });\r\n      await newWorker.load();\r\n      await newWorker.loadLanguage(language);\r\n      await newWorker.initialize(language);\r\n      setWorker(newWorker);\r\n    }\r\n    load();\r\n  }, [language]);\r\n\r\n  return (\r\n    <TesseractContext.Provider value={{\r\n      worker\r\n    }}>\r\n      {children}\r\n    </TesseractContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useTesseractWorker() {\r\n  return React.useContext(TesseractContext);\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { useCanvasContext } from \"../canvas/canvas-context\";\r\nimport { useTesseractWorker } from \"./tesseract-context\";\r\n\r\nexport default function TextRecognize() {\r\n  const {\r\n    imageBlob,\r\n    canvasRef\r\n  } = useCanvasContext();\r\n\r\n  const {\r\n    worker\r\n  } = useTesseractWorker();\r\n\r\n  const [text, setText] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    async function work() {\r\n      if (worker) {\r\n        const result = await worker.recognize(canvasRef.current);\r\n        setText(result?.data?.text);\r\n      }\r\n    }\r\n    work();    \r\n  }, [imageBlob, worker, canvasRef]);\r\n\r\n  return (\r\n    <div className=\"textRecognizer\">{text}</div>\r\n  );\r\n}\r\n","import './App.css';\nimport Canvas from './canvas/canvas';\nimport CanvasContextProvider from './canvas/canvas-context';\nimport TesseractProvider from './text-recognizer/tesseract-context';\nimport TextRecognize from './text-recognizer/text-recognizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CanvasContextProvider>\n        <TesseractProvider language=\"nor\">\n          <TextRecognize />\n          <Canvas />\n        </TesseractProvider>\n      </CanvasContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}